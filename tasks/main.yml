---

- name: Set the Server FQDN variable for the server
  ansible.builtin.set_fact:
    server_fqdn: "{{ ansible_nodename }}"
  when: server_fqdn is undefined

- name: Set the Server FQDN variable for the nodes
  ansible.builtin.set_fact:
    server_fqdn: "{{ server_fqdn }}"
  delegate_to: localhost
  delegate_facts: true

- name: Show the Server FQDN variable
  ansible.builtin.debug:
    msg: "Server FQDN: {{ server_fqdn }}"

- name: Add MariaDB repository
  ansible.builtin.yum_repository:
    name: MariaDB
    description: MariaDB repository
    baseurl: "{{ mariadb_repo_url }}"
    gpgkey: "{{ mariadb_repo_gpg_key }}"
    gpgcheck: yes
    reposdir: "{{ package_repos_dir }}"
  when: mariadb_add_repo

- name: Ensure MariaDB repository on CentOS/RHEL 8 has 'module_hotfixes' option enabled
  community.general.ini_file:
    path: "{{ package_repos_dir }}/MariaDB.repo"
    section: MariaDB
    option: module_hotfixes
    value: "1"
  when: mariadb_add_repo and ansible_os_family == 'RedHat' and ansible_distribution_major_version|int >= 8

- name: Add package repository
  ansible.builtin.yum_repository:
    name: vProtect
    description: vProtect repo
    baseurl: "{{ vprotect_repo }}"
    gpgcheck: no
    reposdir: "{{ package_repos_dir }}"

- name: Install expect and firewalld
  ansible.builtin.yum:
    name: ['expect', 'firewalld']
    state: latest

- name: Install the Server
  ansible.builtin.yum:
    name: vprotect-server
    state: latest
    update_cache: yes

- name: Check if Server is configured
  ansible.builtin.lineinfile:
    path: /opt/vprotect/payara.properties
    regexp: '^([^#]*.vprotect.db.password=.*)'
    state: absent
  check_mode: yes
  register: configured
  tags: configure

- name: Configure the Server
  ansible.builtin.shell: |
    set timeout 10
    spawn vprotect-server-configure
    expect "Set MySQL root password: "
    send "{{ db_pass | quote }}\n"
    expect "Type password again: "
    send "{{ db_pass | quote }}\n"
    expect eof
    exit 0
  args:
    executable: /usr/bin/expect
  when: "configured.changed == false"
  tags: configure

- name: SSL - generate key and certificate
  ansible.builtin.command: 'openssl req -x509 -newkey rsa:4096 -keyout {{ ssl_key }} -out {{ ssl_crt }} -days 3650 -subj "/CN={{ server_fqdn }}" -passout pass:changeit'
  args:
    creates: "{{ ssl_key }}"

- name: SSL - create PKCS12 bundle from certificate and the key
  ansible.builtin.command: 'openssl pkcs12 -export -in {{ ssl_crt }} -inkey {{ ssl_key }} -out {{ ssl_p12 }} -name vprotect -passin pass:changeit -passout pass:changeit'
  args:
    creates: "{{ ssl_p12 }}"

- name: SSL - create a keystore for vProtect Server with PKCS12 bundle
  ansible.builtin.command: 'keytool -importkeystore -destkeystore {{ ssl_keystore }} -srckeystore {{ ssl_p12 }} -srcstoretype PKCS12 -alias vprotect -noprompt -srcstorepass changeit -storepass changeit'
  args:
    creates: "{{ ssl_keystore }}"

- name: SSL - update keystore path
  ansible.builtin.lineinfile:
    path: /opt/vprotect/payara.properties
    line: 'javax.net.ssl.keyStore={{ ssl_keystore }}'
    regexp: '^#?(javax.net.ssl.keyStore=.*)'

- name: Changing ownership of the files in the installation directory
  ansible.builtin.file:
    path: "/opt/vprotect"
    owner: vprotect
    group: vprotect
    recurse: yes

- name: Start and enable the Server service
  ansible.builtin.systemd_service:
    name: vprotect-server
    daemon-reload: yes
    state: started
    enabled: yes

- name: Start and enable firewalld service
  ansible.builtin.systemd_service:
    name: firewalld
    daemon-reload: yes
    state: started
    enabled: yes

- name: Firewall - open port 8181
  ansible.builtin.firewalld:
    port: 8181/tcp
    zone: public
    permanent: yes
    immediate: yes
    state: enabled

- name: Firewall - redirect port 443 to 8181
  ansible.posix.firewalld:
    rich_rule: "rule family=ipv4 forward-port port=443 protocol=tcp to-port=8181"
    zone: public
    permanent: yes
    immediate: yes
    state: enabled

- name: Login to the Server
  ansible.builtin.uri:
    url: "https://localhost:8181/api/session/login"
    method: POST
    body_format: json
    validate_certs: false
    return_content: true
    body:
      login: "admin"
      password: "{{ orig_admin_pass }}"
    status_code: [200, 400]
  retries: 60
  delay: 5
  until: resp_login is succeeded
  register: resp_login
  environment:
    NO_PROXY: "localhost,127.0.0.1"

- name: Change the default admin password
  ansible.builtin.uri:
    url: "https://localhost:8181/api/users/1/password"
    method: PUT
    body_format: json
    validate_certs: false
    headers:
      Cookie: "{{ resp_login.cookies_string }}"
    body:
      value: "{{ admin_pass }}"
    status_code: 204
  when: "resp_login.status == 200 and orig_admin_pass != admin_pass"
  environment:
    NO_PROXY: "localhost,127.0.0.1"

- name: Set admin password fact variable
  ansible.builtin.set_fact:
    admin_pass: "{{ admin_pass }}"